// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package softplan.beneficiarios_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: beneficiarios Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class beneficiarios implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (access_key != null) {

				this.setProperty("access_key", access_key.toString());

			}

			if (credentials_file != null) {

				this.setProperty("credentials_file", credentials_file.toString());

			}

			if (project_id != null) {

				this.setProperty("project_id", project_id.toString());

			}

			if (raw_dataset != null) {

				this.setProperty("raw_dataset", raw_dataset.toString());

			}

			if (secret_key != null) {

				this.setProperty("secret_key", secret_key.toString());

			}

			if (temp_directory != null) {

				this.setProperty("temp_directory", temp_directory.toString());

			}

		}

		public String access_key;

		public String getAccess_key() {
			return this.access_key;
		}

		public String credentials_file;

		public String getCredentials_file() {
			return this.credentials_file;
		}

		public String project_id;

		public String getProject_id() {
			return this.project_id;
		}

		public String raw_dataset;

		public String getRaw_dataset() {
			return this.raw_dataset;
		}

		public String secret_key;

		public String getSecret_key() {
			return this.secret_key;
		}

		public String temp_directory;

		public String getTemp_directory() {
			return this.temp_directory;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "beneficiarios";
	private final String projectName = "SOFTPLAN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					beneficiarios.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(beneficiarios.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tGSConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGSConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tGSGet_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGSGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGSGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tGSDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGSGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGSGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tBigQueryOutput_1_tBQOB_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tBigQueryOutput_1_tBQBE_error(exception, errorComponent, globalMap);

	}

	public void tBigQueryOutput_1_tBQBE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tGSGet_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tGSConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tGSGet_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tGSConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tGSConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tGSConnection_1 begin ] start
				 */

				ok_Hash.put("tGSConnection_1", false);
				start_Hash.put("tGSConnection_1", System.currentTimeMillis());

				currentComponent = "tGSConnection_1";

				int tos_count_tGSConnection_1 = 0;

				final String decryptedPassword_tGSConnection_1 = context.secret_key;

				org.jets3t.service.Jets3tProperties jets3tProperties = org.jets3t.service.Jets3tProperties
						.getInstance(org.jets3t.service.Constants.JETS3T_PROPERTIES_FILENAME);
				jets3tProperties.setProperty("httpclient.useragent",
						"APN/1.0 Talend/7.2 Studio/7.2 (Talend Open Studio)");
				org.jets3t.service.security.GSCredentials credentials_tGSConnection_1 = new org.jets3t.service.security.GSCredentials(
						context.access_key, decryptedPassword_tGSConnection_1);
				org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_tGSConnection_1 = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(
						credentials_tGSConnection_1, " GPN:Talend", null, jets3tProperties);
				service_tGSConnection_1.getAccountOwner();
				globalMap.put("service_" + "tGSConnection_1", service_tGSConnection_1);

				/**
				 * [tGSConnection_1 begin ] stop
				 */

				/**
				 * [tGSConnection_1 main ] start
				 */

				currentComponent = "tGSConnection_1";

				tos_count_tGSConnection_1++;

				/**
				 * [tGSConnection_1 main ] stop
				 */

				/**
				 * [tGSConnection_1 process_data_begin ] start
				 */

				currentComponent = "tGSConnection_1";

				/**
				 * [tGSConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tGSConnection_1 process_data_end ] start
				 */

				currentComponent = "tGSConnection_1";

				/**
				 * [tGSConnection_1 process_data_end ] stop
				 */

				/**
				 * [tGSConnection_1 end ] start
				 */

				currentComponent = "tGSConnection_1";

				ok_Hash.put("tGSConnection_1", true);
				end_Hash.put("tGSConnection_1", System.currentTimeMillis());

				/**
				 * [tGSConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tGSConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tGSGet_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tGSConnection_1 finally ] start
				 */

				currentComponent = "tGSConnection_1";

				/**
				 * [tGSConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tGSConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SOFTPLAN_beneficiarios = new byte[0];
		static byte[] commonByteArray_SOFTPLAN_beneficiarios = new byte[0];

		public String cod_beneficiario;

		public String getCod_beneficiario() {
			return this.cod_beneficiario;
		}

		public String nome;

		public String getNome() {
			return this.nome;
		}

		public String telefone;

		public String getTelefone() {
			return this.telefone;
		}

		public String cpf;

		public String getCpf() {
			return this.cpf;
		}

		public String bairro;

		public String getBairro() {
			return this.bairro;
		}

		public String cidade;

		public String getCidade() {
			return this.cidade;
		}

		public String uf;

		public String getUf() {
			return this.uf;
		}

		public String dt_nascimento;

		public String getDt_nascimento() {
			return this.dt_nascimento;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SOFTPLAN_beneficiarios.length) {
					if (length < 1024 && commonByteArray_SOFTPLAN_beneficiarios.length == 0) {
						commonByteArray_SOFTPLAN_beneficiarios = new byte[1024];
					} else {
						commonByteArray_SOFTPLAN_beneficiarios = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SOFTPLAN_beneficiarios, 0, length);
				strReturn = new String(commonByteArray_SOFTPLAN_beneficiarios, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SOFTPLAN_beneficiarios) {

				try {

					int length = 0;

					this.cod_beneficiario = readString(dis);

					this.nome = readString(dis);

					this.telefone = readString(dis);

					this.cpf = readString(dis);

					this.bairro = readString(dis);

					this.cidade = readString(dis);

					this.uf = readString(dis);

					this.dt_nascimento = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_beneficiario, dos);

				// String

				writeString(this.nome, dos);

				// String

				writeString(this.telefone, dos);

				// String

				writeString(this.cpf, dos);

				// String

				writeString(this.bairro, dos);

				// String

				writeString(this.cidade, dos);

				// String

				writeString(this.uf, dos);

				// String

				writeString(this.dt_nascimento, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_beneficiario=" + cod_beneficiario);
			sb.append(",nome=" + nome);
			sb.append(",telefone=" + telefone);
			sb.append(",cpf=" + cpf);
			sb.append(",bairro=" + bairro);
			sb.append(",cidade=" + cidade);
			sb.append(",uf=" + uf);
			sb.append(",dt_nascimento=" + dt_nascimento);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tGSGet_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tGSGet_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tGSGet_1 begin ] start
				 */

				int NB_ITERATE_tFileInputDelimited_1 = 0; // for statistics

				ok_Hash.put("tGSGet_1", false);
				start_Hash.put("tGSGet_1", System.currentTimeMillis());

				currentComponent = "tGSGet_1";

				int tos_count_tGSGet_1 = 0;

				int nb_line_tGSGet_1 = 0;
				org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_tGSGet_1 = null;
				try {

					service_tGSGet_1 = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService) globalMap
							.get("service_tGSConnection_1");

					java.util.List<java.util.Map<String, String>> list_tGSGet_1 = new java.util.ArrayList<java.util.Map<String, String>>();

					java.util.Map<String, String> map_tGSGet_1_0 = new java.util.HashMap<String, String>();
					map_tGSGet_1_0.put("BUCKET_NAME", "poc_saude");

					map_tGSGet_1_0.put("OBJECT_PREFIX", "beneficiarios");

					map_tGSGet_1_0.put("OBJECT_DELIMITER", "");

					list_tGSGet_1.add(map_tGSGet_1_0);

					for (java.util.Map<String, String> map_tGSGet_1 : list_tGSGet_1) {
						String currentBucketName_tGSGet_1 = map_tGSGet_1.get("BUCKET_NAME");
						org.jets3t.service.model.GSObject[] objects_tGSGet_1 = new org.jets3t.service.model.GSObject[0];
						try {
							objects_tGSGet_1 = service_tGSGet_1.listObjects(currentBucketName_tGSGet_1,
									map_tGSGet_1.get("OBJECT_PREFIX"), map_tGSGet_1.get("OBJECT_DELIMITER"));
						} catch (org.jets3t.service.ServiceException e_tGSGet_1) {

							System.err.println("Exception in component tGSGet_1:");
							System.err.println(e_tGSGet_1.getMessage());
							if (e_tGSGet_1.getErrorCode() != null) {

								System.err.println(e_tGSGet_1.getErrorCode());
							}
							if (e_tGSGet_1.getErrorMessage() != null) {

								System.err.println(e_tGSGet_1.getErrorMessage());
							}

						}

						for (org.jets3t.service.model.GSObject objectSummary_tGSGet_1 : objects_tGSGet_1) {
							String objkey_tGSGet_1 = objectSummary_tGSGet_1.getKey();
							java.io.File file_tGSGet_1 = new java.io.File(context.temp_directory + objkey_tGSGet_1);
							org.jets3t.service.model.GSObject obj_tGSGet_1 = service_tGSGet_1
									.getObject(currentBucketName_tGSGet_1, objkey_tGSGet_1);

							if (obj_tGSGet_1 != null) {
								nb_line_tGSGet_1++;
								boolean isDirectory_tGSGet_1 = false;
								String fileName_tGSGet_1 = file_tGSGet_1.getAbsolutePath();
								fileName_tGSGet_1 = fileName_tGSGet_1.replace("\\", "/");
								String createDir_tGSGet_1 = "";
								if (obj_tGSGet_1.isDirectoryPlaceholder()) {
									createDir_tGSGet_1 = fileName_tGSGet_1;
								} else {
									createDir_tGSGet_1 = fileName_tGSGet_1.substring(0, fileName_tGSGet_1.indexOf("/"));
								}
								if (!"".equals(createDir_tGSGet_1)) {
									java.io.File parentDir_tGSGet_1 = new java.io.File(createDir_tGSGet_1);
									if (!parentDir_tGSGet_1.exists()) {
										parentDir_tGSGet_1.mkdirs();
									}
								}
								if (!obj_tGSGet_1.isDirectoryPlaceholder()) {
									java.io.File parentDir_tGSGet_1 = new java.io.File(file_tGSGet_1.getParent());
									if (!parentDir_tGSGet_1.exists()) {
										parentDir_tGSGet_1.mkdirs();
									}
									java.io.InputStream input_tGSGet_1 = obj_tGSGet_1.getDataInputStream();
									byte bytes_tGSGet_1[] = new byte[4 * 1024];
									int len_tGSGet_1 = -1;
									java.io.FileOutputStream out_tGSGet_1 = new java.io.FileOutputStream(file_tGSGet_1);

									while ((len_tGSGet_1 = input_tGSGet_1.read(bytes_tGSGet_1)) != -1) {
										out_tGSGet_1.write(bytes_tGSGet_1, 0, len_tGSGet_1);
									}
									out_tGSGet_1.flush();
									input_tGSGet_1.close();
									out_tGSGet_1.close();
								}
								obj_tGSGet_1.closeDataInputStream();

								/**
								 * [tGSGet_1 begin ] stop
								 */

								/**
								 * [tGSGet_1 main ] start
								 */

								currentComponent = "tGSGet_1";

								tos_count_tGSGet_1++;

								/**
								 * [tGSGet_1 main ] stop
								 */

								/**
								 * [tGSGet_1 process_data_begin ] start
								 */

								currentComponent = "tGSGet_1";

								/**
								 * [tGSGet_1 process_data_begin ] stop
								 */
								NB_ITERATE_tFileInputDelimited_1++;

								if (execStat) {
									runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("iterate2", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("iterate3", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("row1", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("iterate1", 1,
											"exec" + NB_ITERATE_tFileInputDelimited_1);
									// Thread.sleep(1000);
								}

								/**
								 * [tBigQueryOutput_1_tBQOB begin ] start
								 */

								ok_Hash.put("tBigQueryOutput_1_tBQOB", false);
								start_Hash.put("tBigQueryOutput_1_tBQOB", System.currentTimeMillis());

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQOB";

								if (execStat) {
									if (resourceMap.get("inIterateVComp") == null) {

										if (execStat) {
											runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
										}

									}
								}

								int tos_count_tBigQueryOutput_1_tBQOB = 0;

								int nb_line_tBigQueryOutput_1_tBQOB = 0;
								String rowSeparator_tBigQueryOutput_1_tBQOB = "\n";
								String fieldSeparator_tBigQueryOutput_1_tBQOB = ",";
								char escapeChar_tBigQueryOutput_1_tBQOB = "\\".charAt(0);
								char textEnclosure_tBigQueryOutput_1_tBQOB = "\"".charAt(0);

								escapeChar_tBigQueryOutput_1_tBQOB = textEnclosure_tBigQueryOutput_1_tBQOB;

								if (escapeChar_tBigQueryOutput_1_tBQOB == '\\') {
								} else if (escapeChar_tBigQueryOutput_1_tBQOB == textEnclosure_tBigQueryOutput_1_tBQOB) {
								} else {
									throw new RuntimeException(
											"The escape mode only support the '\\' or double text enclosure.");
								}

								java.io.File file_tBigQueryOutput_1_tBQOB = new java.io.File(
										context.temp_directory + "beneficiarios_bigquery.txt");

								file_tBigQueryOutput_1_tBQOB.getParentFile().mkdirs();

								com.talend.csv.CSVWriter csvWriter_tBigQueryOutput_1_tBQOB = new com.talend.csv.CSVWriter(
										new java.io.BufferedWriter(new java.io.OutputStreamWriter(
												new java.io.FileOutputStream(file_tBigQueryOutput_1_tBQOB, false),
												"ISO-8859-15")));
								resourceMap.put("csvWriter_tBigQueryOutput_1_tBQOB", csvWriter_tBigQueryOutput_1_tBQOB);
								csvWriter_tBigQueryOutput_1_tBQOB
										.setSeparator(fieldSeparator_tBigQueryOutput_1_tBQOB.charAt(0));

								csvWriter_tBigQueryOutput_1_tBQOB.setLineEnd(rowSeparator_tBigQueryOutput_1_tBQOB);
								csvWriter_tBigQueryOutput_1_tBQOB.setEscapeChar(escapeChar_tBigQueryOutput_1_tBQOB);
								csvWriter_tBigQueryOutput_1_tBQOB.setQuoteChar(textEnclosure_tBigQueryOutput_1_tBQOB);
								csvWriter_tBigQueryOutput_1_tBQOB
										.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.AUTO);

								/**
								 * [tBigQueryOutput_1_tBQOB begin ] stop
								 */

								/**
								 * [tFileInputDelimited_1 begin ] start
								 */

								ok_Hash.put("tFileInputDelimited_1", false);
								start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

								currentComponent = "tFileInputDelimited_1";

								int tos_count_tFileInputDelimited_1 = 0;

								final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

								int nb_line_tFileInputDelimited_1 = 0;
								int footer_tFileInputDelimited_1 = 0;
								int totalLinetFileInputDelimited_1 = 0;
								int limittFileInputDelimited_1 = -1;
								int lastLinetFileInputDelimited_1 = -1;

								char fieldSeparator_tFileInputDelimited_1[] = null;

								// support passing value (property: Field Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (((String) ",").length() > 0) {
									fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
								} else {
									throw new IllegalArgumentException("Field Separator must be assigned a char.");
								}

								char rowSeparator_tFileInputDelimited_1[] = null;

								// support passing value (property: Row Separator) by 'context.rs' or
								// 'globalMap.get("rs")'.
								if (((String) "\n").length() > 0) {
									rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
								} else {
									throw new IllegalArgumentException("Row Separator must be assigned a char.");
								}

								Object filename_tFileInputDelimited_1 = /**
																		 * Start field tFileInputDelimited_1:FILENAME
																		 */
										context.temp_directory
												+ "beneficiarios.csv"/** End field tFileInputDelimited_1:FILENAME */
								;
								com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

								try {

									String[] rowtFileInputDelimited_1 = null;
									int currentLinetFileInputDelimited_1 = 0;
									int outputLinetFileInputDelimited_1 = 0;
									try {// TD110 begin
										if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

											int footer_value_tFileInputDelimited_1 = 0;
											if (footer_value_tFileInputDelimited_1 > 0) {
												throw new java.lang.Exception(
														"When the input source is a stream,footer shouldn't be bigger than 0.");
											}

											csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
													(java.io.InputStream) filename_tFileInputDelimited_1,
													fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
										} else {
											csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
													new java.io.BufferedReader(new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_1)),
															"ISO-8859-15")),
													fieldSeparator_tFileInputDelimited_1[0]);
										}

										csvReadertFileInputDelimited_1.setTrimWhitespace(false);
										if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
												&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
											csvReadertFileInputDelimited_1
													.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

										csvReadertFileInputDelimited_1.setQuoteChar('"');

										csvReadertFileInputDelimited_1
												.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

										if (footer_tFileInputDelimited_1 > 0) {
											for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
												csvReadertFileInputDelimited_1.readNext();
											}
											csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
											while (csvReadertFileInputDelimited_1.readNext()) {

												rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
												if (!(rowtFileInputDelimited_1.length == 1
														&& ("\015").equals(rowtFileInputDelimited_1[0]))) {// empty line
																											// when row
																											// separator
																											// is '\n'

													totalLinetFileInputDelimited_1++;

												}

											}
											int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
													- footer_tFileInputDelimited_1 < 0 ? 0
															: totalLinetFileInputDelimited_1
																	- footer_tFileInputDelimited_1;
											if (lastLinetFileInputDelimited_1 > 0) {
												lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
														? lastLinetFileInputDelimited_1
														: lastLineTemptFileInputDelimited_1;
											} else {
												lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
											}

											csvReadertFileInputDelimited_1.close();
											if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
												csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
														(java.io.InputStream) filename_tFileInputDelimited_1,
														fieldSeparator_tFileInputDelimited_1[0], "ISO-8859-15");
											} else {
												csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
														new java.io.BufferedReader(new java.io.InputStreamReader(
																new java.io.FileInputStream(
																		String.valueOf(filename_tFileInputDelimited_1)),
																"ISO-8859-15")),
														fieldSeparator_tFileInputDelimited_1[0]);
											}
											csvReadertFileInputDelimited_1.setTrimWhitespace(false);
											if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
													&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
												csvReadertFileInputDelimited_1
														.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

											csvReadertFileInputDelimited_1.setQuoteChar('"');

											csvReadertFileInputDelimited_1
													.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

										}

										if (limittFileInputDelimited_1 != 0) {
											for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
												csvReadertFileInputDelimited_1.readNext();
											}
										}
										csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);

									} catch (java.lang.Exception e) {

										System.err.println(e.getMessage());

									} // TD110 end

									while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
											&& csvReadertFileInputDelimited_1.readNext()) {
										rowstate_tFileInputDelimited_1.reset();

										rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

										if (rowtFileInputDelimited_1.length == 1
												&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty line when row
																									// separator is '\n'
											continue;
										}

										currentLinetFileInputDelimited_1++;

										if (lastLinetFileInputDelimited_1 > -1
												&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
											break;
										}
										outputLinetFileInputDelimited_1++;
										if (limittFileInputDelimited_1 > 0
												&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
											break;
										}

										row1 = null;

										boolean whetherReject_tFileInputDelimited_1 = false;
										row1 = new row1Struct();
										try {

											char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
											// support passing value (property: Field Separator) by 'context.fs' or
											// 'globalMap.get("fs")'.
											if (((String) ",").length() > 0) {
												fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",")
														.toCharArray();
											} else {
												throw new IllegalArgumentException(
														"Field Separator must be assigned a char.");
											}
											if (rowtFileInputDelimited_1.length == 1
													&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty line when
																										// row separator
																										// is '\n'

												row1.cod_beneficiario = null;

												row1.nome = null;

												row1.telefone = null;

												row1.cpf = null;

												row1.bairro = null;

												row1.cidade = null;

												row1.uf = null;

												row1.dt_nascimento = null;

											} else {

												int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

												columnIndexWithD_tFileInputDelimited_1 = 0;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.cod_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.cod_beneficiario = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 1;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.nome = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.nome = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 2;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.telefone = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.telefone = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 3;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.cpf = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.cpf = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 4;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.bairro = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.bairro = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 5;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.cidade = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.cidade = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 6;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.uf = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.uf = null;

												}

												columnIndexWithD_tFileInputDelimited_1 = 7;

												if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

													row1.dt_nascimento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

												} else {

													row1.dt_nascimento = null;

												}

											}

											if (rowstate_tFileInputDelimited_1.getException() != null) {
												throw rowstate_tFileInputDelimited_1.getException();
											}

										} catch (java.lang.Exception e) {
											whetherReject_tFileInputDelimited_1 = true;

											System.err.println(e.getMessage());
											row1 = null;

										}

										/**
										 * [tFileInputDelimited_1 begin ] stop
										 */

										/**
										 * [tFileInputDelimited_1 main ] start
										 */

										currentComponent = "tFileInputDelimited_1";

										tos_count_tFileInputDelimited_1++;

										/**
										 * [tFileInputDelimited_1 main ] stop
										 */

										/**
										 * [tFileInputDelimited_1 process_data_begin ] start
										 */

										currentComponent = "tFileInputDelimited_1";

										/**
										 * [tFileInputDelimited_1 process_data_begin ] stop
										 */
// Start of branch "row1"
										if (row1 != null) {

											/**
											 * [tBigQueryOutput_1_tBQOB main ] start
											 */

											currentVirtualComponent = "tBigQueryOutput_1";

											currentComponent = "tBigQueryOutput_1_tBQOB";

											// row1
											// row1

											if (execStat) {
												runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
											}

											String[] row_tBigQueryOutput_1_tBQOB = new String[] { "\\N", "\\N", "\\N",
													"\\N", "\\N", "\\N", "\\N", "\\N", }; // empty value must be
																							// NULL('\N' in bulk file)

											if (row1.cod_beneficiario != null) {

												row_tBigQueryOutput_1_tBQOB[0] = row1.cod_beneficiario;

											} else {
												row_tBigQueryOutput_1_tBQOB[0] = "\\N";
											}

											if (row1.nome != null) {

												row_tBigQueryOutput_1_tBQOB[1] = row1.nome;

											} else {
												row_tBigQueryOutput_1_tBQOB[1] = "\\N";
											}

											if (row1.telefone != null) {

												row_tBigQueryOutput_1_tBQOB[2] = row1.telefone;

											} else {
												row_tBigQueryOutput_1_tBQOB[2] = "\\N";
											}

											if (row1.cpf != null) {

												row_tBigQueryOutput_1_tBQOB[3] = row1.cpf;

											} else {
												row_tBigQueryOutput_1_tBQOB[3] = "\\N";
											}

											if (row1.bairro != null) {

												row_tBigQueryOutput_1_tBQOB[4] = row1.bairro;

											} else {
												row_tBigQueryOutput_1_tBQOB[4] = "\\N";
											}

											if (row1.cidade != null) {

												row_tBigQueryOutput_1_tBQOB[5] = row1.cidade;

											} else {
												row_tBigQueryOutput_1_tBQOB[5] = "\\N";
											}

											if (row1.uf != null) {

												row_tBigQueryOutput_1_tBQOB[6] = row1.uf;

											} else {
												row_tBigQueryOutput_1_tBQOB[6] = "\\N";
											}

											if (row1.dt_nascimento != null) {

												row_tBigQueryOutput_1_tBQOB[7] = row1.dt_nascimento;

											} else {
												row_tBigQueryOutput_1_tBQOB[7] = "\\N";
											}

											csvWriter_tBigQueryOutput_1_tBQOB
													.writeNextEnhance(row_tBigQueryOutput_1_tBQOB, "");
											nb_line_tBigQueryOutput_1_tBQOB++;

											tos_count_tBigQueryOutput_1_tBQOB++;

											/**
											 * [tBigQueryOutput_1_tBQOB main ] stop
											 */

											/**
											 * [tBigQueryOutput_1_tBQOB process_data_begin ] start
											 */

											currentVirtualComponent = "tBigQueryOutput_1";

											currentComponent = "tBigQueryOutput_1_tBQOB";

											/**
											 * [tBigQueryOutput_1_tBQOB process_data_begin ] stop
											 */

											/**
											 * [tBigQueryOutput_1_tBQOB process_data_end ] start
											 */

											currentVirtualComponent = "tBigQueryOutput_1";

											currentComponent = "tBigQueryOutput_1_tBQOB";

											/**
											 * [tBigQueryOutput_1_tBQOB process_data_end ] stop
											 */

										} // End of branch "row1"

										/**
										 * [tFileInputDelimited_1 process_data_end ] start
										 */

										currentComponent = "tFileInputDelimited_1";

										/**
										 * [tFileInputDelimited_1 process_data_end ] stop
										 */

										/**
										 * [tFileInputDelimited_1 end ] start
										 */

										currentComponent = "tFileInputDelimited_1";

										nb_line_tFileInputDelimited_1++;
									}

								} finally {
									if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
										if (csvReadertFileInputDelimited_1 != null) {
											csvReadertFileInputDelimited_1.close();
										}
									}
									if (csvReadertFileInputDelimited_1 != null) {
										globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
									}

								}

								ok_Hash.put("tFileInputDelimited_1", true);
								end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

								/**
								 * [tFileInputDelimited_1 end ] stop
								 */

								/**
								 * [tBigQueryOutput_1_tBQOB end ] start
								 */

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQOB";

								if (csvWriter_tBigQueryOutput_1_tBQOB != null) {
									csvWriter_tBigQueryOutput_1_tBQOB.close();
								}
								resourceMap.put("finish_tBigQueryOutput_1_tBQOB", true);
								globalMap.put("tBigQueryOutput_1_tBQOB_NB_LINE", nb_line_tBigQueryOutput_1_tBQOB);

								if (execStat) {
									if (resourceMap.get("inIterateVComp") == null
											|| !((Boolean) resourceMap.get("inIterateVComp"))) {
										runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
									}
								}

								ok_Hash.put("tBigQueryOutput_1_tBQOB", true);
								end_Hash.put("tBigQueryOutput_1_tBQOB", System.currentTimeMillis());

								/**
								 * [tBigQueryOutput_1_tBQOB end ] stop
								 */

								/**
								 * [tBigQueryOutput_1_tBQBE begin ] start
								 */

								int NB_ITERATE_tGSDelete_1 = 0; // for statistics

								ok_Hash.put("tBigQueryOutput_1_tBQBE", false);
								start_Hash.put("tBigQueryOutput_1_tBQBE", System.currentTimeMillis());

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQBE";

								int tos_count_tBigQueryOutput_1_tBQBE = 0;

								/* ----START-CREATING-CLIENT (Cloud API)---- */

								com.google.auth.oauth2.GoogleCredentials credentials_tBigQueryOutput_1_tBQBE;
								java.io.File credentialsFile_tBigQueryOutput_1_tBQBE = new java.io.File(
										context.credentials_file);
								try (java.io.FileInputStream credentialsStream_tBigQueryOutput_1_tBQBE = new java.io.FileInputStream(
										credentialsFile_tBigQueryOutput_1_tBQBE)) {
									credentials_tBigQueryOutput_1_tBQBE = com.google.auth.oauth2.ServiceAccountCredentials
											.fromStream(credentialsStream_tBigQueryOutput_1_tBQBE);
								}

								com.google.cloud.bigquery.BigQuery bigquery_tBigQueryOutput_1_tBQBE = com.google.cloud.bigquery.BigQueryOptions
										.newBuilder().setCredentials(credentials_tBigQueryOutput_1_tBQBE)
										.setProjectId(context.project_id).build().getService();

								/* ----END-CREATING-CLIENT (Cloud API)---- */

								long nb_line_tBigQueryOutput_1_tBQBE = 0;

								/* ----START-UPLOADING-FILE---- */

								final String decryptedPwd_tBigQueryOutput_1_tBQBE = context.secret_key;

								org.jets3t.service.security.GSCredentials gsCredentials_tBigQueryOutput_1_tBQBE = new org.jets3t.service.security.GSCredentials(
										context.access_key, decryptedPwd_tBigQueryOutput_1_tBQBE);

								org.jets3t.service.impl.rest.httpclient.GoogleStorageService gsService_tBigQueryOutput_1_tBQBE = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(
										gsCredentials_tBigQueryOutput_1_tBQBE, " GPN:Talend", null);

								java.io.File fileData_tBigQueryOutput_1_tBQBE = new java.io.File(
										context.temp_directory + "beneficiarios_bigquery.txt");
								org.jets3t.service.model.GSObject fileObject_tBigQueryOutput_1_tBQBE = new org.jets3t.service.model.GSObject(
										fileData_tBigQueryOutput_1_tBQBE);

								gsService_tBigQueryOutput_1_tBQBE.putObject("poc_saude",
										fileObject_tBigQueryOutput_1_tBQBE);

								/* ----END-UPLOADING-FILE---- */

								/* ----START-CREATING-JOB (Cloud API)---- */
								com.google.cloud.bigquery.TableId tableId_tBigQueryOutput_1_tBQBE = com.google.cloud.bigquery.TableId
										.of(context.project_id, context.raw_dataset, "beneficiarios");
								com.google.cloud.bigquery.Table table_tBigQueryOutput_1_tBQBE = bigquery_tBigQueryOutput_1_tBQBE
										.getTable(tableId_tBigQueryOutput_1_tBQBE);
								com.google.cloud.bigquery.LoadJobConfiguration.Builder loadJobBuilder_tBigQueryOutput_1_tBQBE = com.google.cloud.bigquery.LoadJobConfiguration
										.newBuilder(tableId_tBigQueryOutput_1_tBQBE,
												"gs://poc_saude/beneficiarios_bigquery.txt");
								if (false && table_tBigQueryOutput_1_tBQBE != null) {
									boolean deleted = bigquery_tBigQueryOutput_1_tBQBE
											.delete(tableId_tBigQueryOutput_1_tBQBE);
									if (deleted) {

									} else {
										throw new RuntimeException(
												"Unable to delete table " + tableId_tBigQueryOutput_1_tBQBE);
									}
								}
								if (false || false) {
									java.util.List<com.google.cloud.bigquery.Field> fields_tBigQueryOutput_1_tBQBE = new java.util.ArrayList<>();

									com.google.cloud.bigquery.Field field_0 = com.google.cloud.bigquery.Field
											.newBuilder("cod_beneficiario",
													com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_0);

									com.google.cloud.bigquery.Field field_1 = com.google.cloud.bigquery.Field
											.newBuilder("nome", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_1);

									com.google.cloud.bigquery.Field field_2 = com.google.cloud.bigquery.Field
											.newBuilder("telefone", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_2);

									com.google.cloud.bigquery.Field field_3 = com.google.cloud.bigquery.Field
											.newBuilder("cpf", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_3);

									com.google.cloud.bigquery.Field field_4 = com.google.cloud.bigquery.Field
											.newBuilder("bairro", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_4);

									com.google.cloud.bigquery.Field field_5 = com.google.cloud.bigquery.Field
											.newBuilder("cidade", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_5);

									com.google.cloud.bigquery.Field field_6 = com.google.cloud.bigquery.Field
											.newBuilder("uf", com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_6);

									com.google.cloud.bigquery.Field field_7 = com.google.cloud.bigquery.Field
											.newBuilder("dt_nascimento",
													com.google.cloud.bigquery.LegacySQLTypeName.STRING)
											.setMode(com.google.cloud.bigquery.Field.Mode.valueOf("NULLABLE")).build();
									fields_tBigQueryOutput_1_tBQBE.add(field_7);

									com.google.cloud.bigquery.Schema schema_tBigQueryOutput_1_tBQBE = com.google.cloud.bigquery.Schema
											.of(fields_tBigQueryOutput_1_tBQBE);
									com.google.cloud.bigquery.TableInfo tableInfo_tBigQueryOutput_1_tBQBE = com.google.cloud.bigquery.TableInfo
											.newBuilder(tableId_tBigQueryOutput_1_tBQBE,
													com.google.cloud.bigquery.StandardTableDefinition
															.of(schema_tBigQueryOutput_1_tBQBE))
											.build();
									table_tBigQueryOutput_1_tBQBE = bigquery_tBigQueryOutput_1_tBQBE
											.create(tableInfo_tBigQueryOutput_1_tBQBE);
									loadJobBuilder_tBigQueryOutput_1_tBQBE.setSchema(schema_tBigQueryOutput_1_tBQBE);
								}

								loadJobBuilder_tBigQueryOutput_1_tBQBE.setCreateDisposition(
										com.google.cloud.bigquery.JobInfo.CreateDisposition.CREATE_NEVER);

								loadJobBuilder_tBigQueryOutput_1_tBQBE.setWriteDisposition(
										com.google.cloud.bigquery.JobInfo.WriteDisposition.WRITE_APPEND);

								loadJobBuilder_tBigQueryOutput_1_tBQBE
										.setDestinationTable(tableId_tBigQueryOutput_1_tBQBE);
								com.google.cloud.bigquery.CsvOptions.Builder csvOptions_tBigQueryOutput_1_tBQBE = com.google.cloud.bigquery.CsvOptions
										.newBuilder();
								csvOptions_tBigQueryOutput_1_tBQBE.setAllowQuotedNewLines(true);

								loadJobBuilder_tBigQueryOutput_1_tBQBE.setFormatOptions(
										csvOptions_tBigQueryOutput_1_tBQBE.setFieldDelimiter(",").build());

								loadJobBuilder_tBigQueryOutput_1_tBQBE.setNullMarker("\\N");
								com.google.cloud.bigquery.Job job_tBigQueryOutput_1_tBQBE = bigquery_tBigQueryOutput_1_tBQBE
										.create(com.google.cloud.bigquery.JobInfo
												.of(loadJobBuilder_tBigQueryOutput_1_tBQBE.build()));
								job_tBigQueryOutput_1_tBQBE = job_tBigQueryOutput_1_tBQBE.waitFor(
										com.google.cloud.RetryOption
												.initialRetryDelay(org.threeten.bp.Duration.ofSeconds(1)),
										com.google.cloud.RetryOption
												.totalTimeout(org.threeten.bp.Duration.ofSeconds(30)));
								if (job_tBigQueryOutput_1_tBQBE != null
										&& job_tBigQueryOutput_1_tBQBE.getStatus().getError() == null) {

								} else {
									List<com.google.cloud.bigquery.BigQueryError> errorList = job_tBigQueryOutput_1_tBQBE
											.getStatus().getExecutionErrors();
									throw new RuntimeException("Job failed: " + errorList.get(errorList.size() - 1));
								}

								/* ----END-CREATING-JOB (Cloud API)---- */

								/**
								 * [tBigQueryOutput_1_tBQBE begin ] stop
								 */

								/**
								 * [tBigQueryOutput_1_tBQBE main ] start
								 */

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQBE";

								tos_count_tBigQueryOutput_1_tBQBE++;

								/**
								 * [tBigQueryOutput_1_tBQBE main ] stop
								 */

								/**
								 * [tBigQueryOutput_1_tBQBE process_data_begin ] start
								 */

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQBE";

								/**
								 * [tBigQueryOutput_1_tBQBE process_data_begin ] stop
								 */
								NB_ITERATE_tGSDelete_1++;

								if (execStat) {
									runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("iterate3", 3, 0);
								}

								if (execStat) {
									runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tGSDelete_1);
									// Thread.sleep(1000);
								}

								/**
								 * [tGSDelete_1 begin ] start
								 */

								int NB_ITERATE_tFileDelete_1 = 0; // for statistics

								ok_Hash.put("tGSDelete_1", false);
								start_Hash.put("tGSDelete_1", System.currentTimeMillis());

								currentComponent = "tGSDelete_1";

								int tos_count_tGSDelete_1 = 0;

								int nb_line_tGSDelete_1 = 0;
								org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_tGSDelete_1 = null;
								try {

									service_tGSDelete_1 = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService) globalMap
											.get("service_tGSConnection_1");

									java.util.List<java.util.Map<String, String>> list_tGSDelete_1 = new java.util.ArrayList<java.util.Map<String, String>>();

									java.util.Map<String, String> map_tGSDelete_1_0 = new java.util.HashMap<String, String>();
									map_tGSDelete_1_0.put("BUCKET_NAME", "poc_saude");

									map_tGSDelete_1_0.put("OBJECT_PREFIX", "beneficiarios_bigquery");

									map_tGSDelete_1_0.put("OBJECT_DELIMITER", "");

									list_tGSDelete_1.add(map_tGSDelete_1_0);

									for (java.util.Map<String, String> map_tGSDelete_1 : list_tGSDelete_1) {
										String currentBucketName_tGSDelete_1 = map_tGSDelete_1.get("BUCKET_NAME");
										org.jets3t.service.model.GSObject[] objects_tGSDelete_1 = new org.jets3t.service.model.GSObject[0];
										try {
											objects_tGSDelete_1 = service_tGSDelete_1.listObjects(
													currentBucketName_tGSDelete_1, map_tGSDelete_1.get("OBJECT_PREFIX"),
													map_tGSDelete_1.get("OBJECT_DELIMITER"));
										} catch (org.jets3t.service.ServiceException e_tGSDelete_1) {

											System.err.println("Exception in component tGSDelete_1:");
											System.err.println(e_tGSDelete_1.getMessage());
											if (e_tGSDelete_1.getErrorCode() != null) {

												System.err.println(e_tGSDelete_1.getErrorCode());
											}
											if (e_tGSDelete_1.getErrorMessage() != null) {

												System.err.println(e_tGSDelete_1.getErrorMessage());
											}

										}

										for (org.jets3t.service.model.GSObject objectSummary_tGSDelete_1 : objects_tGSDelete_1) {
											nb_line_tGSDelete_1++;
											service_tGSDelete_1.deleteObject(currentBucketName_tGSDelete_1,
													objectSummary_tGSDelete_1.getKey());

											/**
											 * [tGSDelete_1 begin ] stop
											 */

											/**
											 * [tGSDelete_1 main ] start
											 */

											currentComponent = "tGSDelete_1";

											tos_count_tGSDelete_1++;

											/**
											 * [tGSDelete_1 main ] stop
											 */

											/**
											 * [tGSDelete_1 process_data_begin ] start
											 */

											currentComponent = "tGSDelete_1";

											/**
											 * [tGSDelete_1 process_data_begin ] stop
											 */
											NB_ITERATE_tFileDelete_1++;

											if (execStat) {
												runStat.updateStatOnConnection("iterate3", 1,
														"exec" + NB_ITERATE_tFileDelete_1);
												// Thread.sleep(1000);
											}

											/**
											 * [tFileDelete_1 begin ] start
											 */

											ok_Hash.put("tFileDelete_1", false);
											start_Hash.put("tFileDelete_1", System.currentTimeMillis());

											currentComponent = "tFileDelete_1";

											int tos_count_tFileDelete_1 = 0;

											/**
											 * [tFileDelete_1 begin ] stop
											 */

											/**
											 * [tFileDelete_1 main ] start
											 */

											currentComponent = "tFileDelete_1";

											class DeleteFoldertFileDelete_1 {
												/**
												 * delete all the sub-files in 'file'
												 * 
												 * @param file
												 */
												public boolean delete(java.io.File file) {
													java.io.File[] files = file.listFiles();
													for (int i = 0; i < files.length; i++) {
														if (files[i].isFile()) {
															files[i].delete();
														} else if (files[i].isDirectory()) {
															if (!files[i].delete()) {
																delete(files[i]);
															}
														}
													}
													deleteDirectory(file);
													return file.delete();
												}

												/**
												 * delete all the sub-folders in 'file'
												 * 
												 * @param file
												 */
												private void deleteDirectory(java.io.File file) {
													java.io.File[] filed = file.listFiles();
													for (int i = 0; i < filed.length; i++) {
														if (filed[i].isDirectory()) {
															deleteDirectory(filed[i]);
														}
														filed[i].delete();
													}
												}

											}
											java.io.File file_tFileDelete_1 = new java.io.File(
													context.temp_directory + "beneficiarios_bigquery.txt");
											if (file_tFileDelete_1.exists() && file_tFileDelete_1.isFile()) {
												if (file_tFileDelete_1.delete()) {
													globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
												} else {
													globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
													throw new RuntimeException(
															"File " + file_tFileDelete_1.getAbsolutePath()
																	+ " can not be deleted.");
												}
											} else {
												globalMap.put("tFileDelete_1_CURRENT_STATUS",
														"File does not exist or is invalid.");
												throw new RuntimeException(
														"File " + file_tFileDelete_1.getAbsolutePath()
																+ " does not exist or is invalid or is not a file.");
											}
											globalMap.put("tFileDelete_1_DELETE_PATH",
													context.temp_directory + "beneficiarios_bigquery.txt");

											tos_count_tFileDelete_1++;

											/**
											 * [tFileDelete_1 main ] stop
											 */

											/**
											 * [tFileDelete_1 process_data_begin ] start
											 */

											currentComponent = "tFileDelete_1";

											/**
											 * [tFileDelete_1 process_data_begin ] stop
											 */

											/**
											 * [tFileDelete_1 process_data_end ] start
											 */

											currentComponent = "tFileDelete_1";

											/**
											 * [tFileDelete_1 process_data_end ] stop
											 */

											/**
											 * [tFileDelete_1 end ] start
											 */

											currentComponent = "tFileDelete_1";

											ok_Hash.put("tFileDelete_1", true);
											end_Hash.put("tFileDelete_1", System.currentTimeMillis());

											/**
											 * [tFileDelete_1 end ] stop
											 */
											if (execStat) {
												runStat.updateStatOnConnection("iterate3", 2,
														"exec" + NB_ITERATE_tFileDelete_1);
											}

											/**
											 * [tGSDelete_1 process_data_end ] start
											 */

											currentComponent = "tGSDelete_1";

											/**
											 * [tGSDelete_1 process_data_end ] stop
											 */

											/**
											 * [tGSDelete_1 end ] start
											 */

											currentComponent = "tGSDelete_1";

										}
									}

								} catch (java.lang.Exception e_tGSDelete_1) {

									if (e_tGSDelete_1 instanceof org.jets3t.service.ServiceException) {
										org.jets3t.service.ServiceException servError_tGSDelete_1 = (org.jets3t.service.ServiceException) e_tGSDelete_1;

										System.err.println("Exception in component tGSDelete_1:");
										System.err.println(servError_tGSDelete_1.getMessage());
										if (servError_tGSDelete_1.getErrorCode() != null) {

											System.err.println(servError_tGSDelete_1.getErrorCode());
										}
										if (servError_tGSDelete_1.getErrorMessage() != null) {

											System.err.println(servError_tGSDelete_1.getErrorMessage());
										}

									} else {

										System.err.println(e_tGSDelete_1.getMessage());
									}

								}
								globalMap.put("tGSDelete_1_NB_LINE", nb_line_tGSDelete_1);

								ok_Hash.put("tGSDelete_1", true);
								end_Hash.put("tGSDelete_1", System.currentTimeMillis());

								if (execStat) {
									runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
								}
								tFileDelete_2Process(globalMap);

								/**
								 * [tGSDelete_1 end ] stop
								 */
								if (execStat) {
									runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tGSDelete_1);
								}

								/**
								 * [tBigQueryOutput_1_tBQBE process_data_end ] start
								 */

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQBE";

								/**
								 * [tBigQueryOutput_1_tBQBE process_data_end ] stop
								 */

								/**
								 * [tBigQueryOutput_1_tBQBE end ] start
								 */

								currentVirtualComponent = "tBigQueryOutput_1";

								currentComponent = "tBigQueryOutput_1_tBQBE";

								ok_Hash.put("tBigQueryOutput_1_tBQBE", true);
								end_Hash.put("tBigQueryOutput_1_tBQBE", System.currentTimeMillis());

								/**
								 * [tBigQueryOutput_1_tBQBE end ] stop
								 */

								if (execStat) {
									runStat.updateStatOnConnection("iterate1", 2,
											"exec" + NB_ITERATE_tFileInputDelimited_1);
								}

								/**
								 * [tGSGet_1 process_data_end ] start
								 */

								currentComponent = "tGSGet_1";

								/**
								 * [tGSGet_1 process_data_end ] stop
								 */

								/**
								 * [tGSGet_1 end ] start
								 */

								currentComponent = "tGSGet_1";

							}
						}

					}

				} catch (java.lang.Exception e_tGSGet_1) {

					if (e_tGSGet_1 instanceof org.jets3t.service.ServiceException) {
						org.jets3t.service.ServiceException servError_tGSGet_1 = (org.jets3t.service.ServiceException) e_tGSGet_1;

						System.err.println("Exception in component tGSGet_1:");
						System.err.println(servError_tGSGet_1.getMessage());
						if (servError_tGSGet_1.getErrorCode() != null) {

							System.err.println(servError_tGSGet_1.getErrorCode());
						}
						if (servError_tGSGet_1.getErrorMessage() != null) {

							System.err.println(servError_tGSGet_1.getErrorMessage());
						}

					} else {

						System.err.println(e_tGSGet_1.getMessage());
					}

				}
				globalMap.put("tGSGet_1_NB_LINE", nb_line_tGSGet_1);

				ok_Hash.put("tGSGet_1", true);
				end_Hash.put("tGSGet_1", System.currentTimeMillis());

				/**
				 * [tGSGet_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tGSGet_1 finally ] start
				 */

				currentComponent = "tGSGet_1";

				/**
				 * [tGSGet_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQOB finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQOB";

				if (resourceMap.get("finish_tBigQueryOutput_1_tBQOB") == null) {
					if (resourceMap.get("csvWriter_tBigQueryOutput_1_tBQOB") != null) {
						((com.talend.csv.CSVWriter) resourceMap.get("csvWriter_tBigQueryOutput_1_tBQOB")).close();
					}
				}

				/**
				 * [tBigQueryOutput_1_tBQOB finally ] stop
				 */

				/**
				 * [tBigQueryOutput_1_tBQBE finally ] start
				 */

				currentVirtualComponent = "tBigQueryOutput_1";

				currentComponent = "tBigQueryOutput_1_tBQBE";

				/**
				 * [tBigQueryOutput_1_tBQBE finally ] stop
				 */

				/**
				 * [tGSDelete_1 finally ] start
				 */

				currentComponent = "tGSDelete_1";

				/**
				 * [tGSDelete_1 finally ] stop
				 */

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tGSGet_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(context.temp_directory + "beneficiarios.csv");
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS", "No file deleted.");
						throw new RuntimeException(
								"File " + file_tFileDelete_2.getAbsolutePath() + " can not be deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS", "File does not exist or is invalid.");
					throw new RuntimeException("File " + file_tFileDelete_2.getAbsolutePath()
							+ " does not exist or is invalid or is not a file.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH", context.temp_directory + "beneficiarios.csv");

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_begin ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_begin ] stop
				 */

				/**
				 * [tFileDelete_2 process_data_end ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 process_data_end ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final beneficiarios beneficiariosClass = new beneficiarios();

		int exitCode = beneficiariosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = beneficiarios.class.getClassLoader()
					.getResourceAsStream("softplan/beneficiarios_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = beneficiarios.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("access_key", "id_String");
					context.access_key = (String) context.getProperty("access_key");
					context.setContextType("credentials_file", "id_String");
					context.credentials_file = (String) context.getProperty("credentials_file");
					context.setContextType("project_id", "id_String");
					context.project_id = (String) context.getProperty("project_id");
					context.setContextType("raw_dataset", "id_String");
					context.raw_dataset = (String) context.getProperty("raw_dataset");
					context.setContextType("secret_key", "id_String");
					context.secret_key = (String) context.getProperty("secret_key");
					context.setContextType("temp_directory", "id_String");
					context.temp_directory = (String) context.getProperty("temp_directory");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("access_key")) {
				context.access_key = (String) parentContextMap.get("access_key");
			}
			if (parentContextMap.containsKey("credentials_file")) {
				context.credentials_file = (String) parentContextMap.get("credentials_file");
			}
			if (parentContextMap.containsKey("project_id")) {
				context.project_id = (String) parentContextMap.get("project_id");
			}
			if (parentContextMap.containsKey("raw_dataset")) {
				context.raw_dataset = (String) parentContextMap.get("raw_dataset");
			}
			if (parentContextMap.containsKey("secret_key")) {
				context.secret_key = (String) parentContextMap.get("secret_key");
			}
			if (parentContextMap.containsKey("temp_directory")) {
				context.temp_directory = (String) parentContextMap.get("temp_directory");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tGSConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tGSConnection_1) {
			globalMap.put("tGSConnection_1_SUBPROCESS_STATE", -1);

			e_tGSConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : beneficiarios");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeGSConnections();

	}

	private void closeGSConnections() {
		try {
			org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_tGSConnection_1 = (org.jets3t.service.impl.rest.httpclient.GoogleStorageService) globalMap
					.get("service_tGSConnection_1");
			if (service_tGSConnection_1 != null) {
				service_tGSConnection_1.shutdown();
			}

		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		connections.put("service_tGSConnection_1", globalMap.get("service_tGSConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 89529 characters generated by Talend Open Studio for Data Integration on the
 * 22 de Setembro de 2019 22h20min56s BRT
 ************************************************************************************************/